using AutomatedComponentTestWriter.Models;
using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AutomatedComponentTestWriter.Controllers
{
    class ComponentTestGenerator
    {
        private ComponentTestDTO dto;
        private CodeCompileUnit componentTestTemplate;
        private CodeNamespace componentTestNamespace;
        private CodeTypeDeclaration componentTestClass;
        private string className;

        public ComponentTestGenerator(ComponentTestDTO dataTransferObject, string clsName)
        {
            dto = dataTransferObject;
            className = clsName;

            componentTestTemplate = new CodeCompileUnit();
            componentTestNamespace = new CodeNamespace("AutoGeneratedTests");

            //Add namespace imports to the class. 
            componentTestNamespace.Imports.Add(new CodeNamespaceImport("System"));
            componentTestNamespace.Imports.Add(new CodeNamespaceImport("System.Net"));
            componentTestNamespace.Imports.Add(new CodeNamespaceImport("Newtonsoft.Json"));
            componentTestNamespace.Imports.Add(new CodeNamespaceImport("System.Threading.Tasks"));
            componentTestNamespace.Imports.Add(new CodeNamespaceImport("Microsoft.VisualStudio.TestTools.UnitTesting"));
            componentTestTemplate.Namespaces.Add(componentTestNamespace);

            // Declare the class and make it public.
            componentTestClass = new CodeTypeDeclaration();
            componentTestClass.Name = dto.DTOName + "UnitTests";
            componentTestClass.IsClass = true;
            componentTestClass.TypeAttributes = System.Reflection.TypeAttributes.Public;

            GenerateUnitTests();
        }

        public void GenerateCSharpCode()
        {
            CodeDomProvider provider = CodeDomProvider.CreateProvider("CSharp");
            CodeGeneratorOptions options = new CodeGeneratorOptions();
            options.BracingStyle = "C";

            // Map the relative path to the server, then check to see if a directory for created source files doesn't exist already. If it doesn't, create it. If it does, don't do anything.
            string path = System.Web.Hosting.HostingEnvironment.MapPath("~/Generated");
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }
            
            using (StreamWriter sourceWriter = new StreamWriter(Path.Combine(path, className), false, System.Text.Encoding.UTF8))
            {
                provider.GenerateCodeFromCompileUnit(
                    componentTestTemplate, sourceWriter, options);
            }
        }

        private void GenerateUnitTests()
        {
            foreach (Property dtoProperty in dto.Properties)
            {
                foreach (Parameter param in dtoProperty.Parameters)
                {
                    CreateSingleUnitTest(param, dtoProperty);
                }
            }

            componentTestNamespace.Types.Add(componentTestClass);
        }

        private void CreateSingleUnitTest(Parameter param, Property prop)
        {
            CodeMemberMethod paramUnitTest = new CodeMemberMethod
            {
                Attributes = MemberAttributes.Public | MemberAttributes.Final,
                Name = "AutoGeneratedUnitTest_" + param.TestName + ""
            };
            paramUnitTest.ReturnType = new CodeTypeReference("async Task");
            // Generates: [TestMethod()]
            paramUnitTest.CustomAttributes.Add(new CodeAttributeDeclaration("TestMethod"));

            // Generates: [TestCategory("Integration")]
            paramUnitTest.CustomAttributes.Add(new CodeAttributeDeclaration(
                "TestCategory",
                new CodeAttributeArgument(new CodePrimitiveExpression("Integration"))));

            // Create the declaration for the URI field and add it to the DOM for the method.
            CodeSnippetExpression uriExpression = new CodeSnippetExpression("\"" + dto.APIEndpointURL + "\"");
            CodeVariableDeclarationStatement uriStatement = new CodeVariableDeclarationStatement("var", "_uri", uriExpression);
            paramUnitTest.Statements.Add(uriStatement);

            // Create the declaration for the dto and add it to the DOM for the method.
            CodeSnippetExpression requestExpression = new CodeSnippetExpression("new " + dto.DTOName + "()");
            CodeVariableDeclarationStatement requestStatement = new CodeVariableDeclarationStatement("var", "request", requestExpression);
            paramUnitTest.Statements.Add(requestStatement);

            // Create the declaration for accessing the dto's property.
            // Add it to the DOM graph for the method afterwards.
            SetDTOPropertyNameValue(param, prop, paramUnitTest);

            // Create the response message then add it to the DOM graph. This is an await action that posts to the api endpoint.
            CodeSnippetExpression responseExpression = new CodeSnippetExpression("await ApiActions.Post(_uri, request).ConfigureAwait(false)");
            CodeVariableDeclarationStatement responseStatement = new CodeVariableDeclarationStatement("var", "response", responseExpression);
            paramUnitTest.Statements.Add(responseStatement);

            // Create the await error message and add it to the DOM graph.
            CodeSnippetExpression errormessageExpression = new CodeSnippetExpression("await response.Content.ReadAsStringAsync().ConfigureAwait(false)");
            CodeVariableDeclarationStatement errormessageStatement = new CodeVariableDeclarationStatement("var", "errormessage", errormessageExpression);
            paramUnitTest.Statements.Add(errormessageStatement);

            // Add an assert statement checking two status codes are equal to the DOM graph.
            CodeVariableReferenceExpression assertAreEqualFieldExpression = new CodeVariableReferenceExpression("Assert.AreEqual(HttpStatusCode." + param.HTTPResponse + ", response.StatusCode)");
            paramUnitTest.Statements.Add(assertAreEqualFieldExpression);

            // Add an assert statement confirming that the error message is not null to the DOM graph
            CodeVariableReferenceExpression assertIsNotNullExpression = new CodeVariableReferenceExpression("Assert.IsNotNull(errormessage)");
            paramUnitTest.Statements.Add(assertIsNotNullExpression);

            // Create a guidstring expression that converts the error message to a string.
            CodeSnippetExpression guidstringExpression = new CodeSnippetExpression("JsonConvert.ToString(errormessage)");
            CodeVariableDeclarationStatement guidstringStatement = new CodeVariableDeclarationStatement("var", "guidstring", guidstringExpression);
            paramUnitTest.Statements.Add(guidstringStatement);

            // Assert that the guidstring contains the expected error message.
            CodeVariableReferenceExpression assertIsTrueExpression = new CodeVariableReferenceExpression("Assert.IsTrue(guidstring.Contains(" + param.ExpectedMessage + "))");
            paramUnitTest.Statements.Add(assertIsTrueExpression);

            componentTestClass.Members.Add(paramUnitTest);
        }

        private void SetDTOPropertyNameValue(Parameter param, Property prop, CodeMemberMethod paramUnitTest)
        {
            if (param.NullParam.Equals("True"))
            {
                CodeVariableReferenceExpression requestPropertyFieldExpression = new CodeVariableReferenceExpression(dto.DTOName + "." + prop.PropertyName + " = null");
                paramUnitTest.Statements.Add(requestPropertyFieldExpression);
            }
            else if (param.BlankParam.Equals("True"))
            {

            }
            else if (param.RandomParam.Equals("True"))
            {

            }
        }

        private string CreateRandomValue(Parameter param, Property prop)
        {
            int charLimit = int.Parse(param.ValueLength);
            Random rnd = new Random();
            switch (prop.DataType)
            {
                case "int":
                    string randomIntAsString = "";
                    for (int i = 0; i < charLimit; i++)
                    {
                        randomIntAsString += rnd.Next(0, 9);
                    }
                    return randomIntAsString;
                case "bool":

                    break;
                case "string":
                    break;

            }
            return "";
        }
    }
}