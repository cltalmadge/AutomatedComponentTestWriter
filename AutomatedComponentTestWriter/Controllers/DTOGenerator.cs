using AutomatedComponentTestWriter.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.IO;

namespace AutomatedComponentTestWriter.Controllers
{
    public class DTOGenerator
    {

        private ComponentTestDTO dataTransferObject;
        private CodeCompileUnit dataTransferObjectTemplate;
        private CodeNamespace dataTransferObjectNamespace;
        private CodeTypeDeclaration dataTransferObjectClass;

        private string fileName;

        public string FileName { get => fileName; set => fileName = value; }
        public CodeCompileUnit DtoTemplate { get => dataTransferObjectTemplate; set => dataTransferObjectTemplate = value; }
        public CodeNamespace DtoNamespace { get => dataTransferObjectNamespace; set => dataTransferObjectNamespace = value; }
        public CodeTypeDeclaration DtoClass { get => dataTransferObjectClass; set => dataTransferObjectClass = value; }
        internal ComponentTestDTO Dto { get => dataTransferObject; set => dataTransferObject = value; }

        // Constructor accepts an object detailing information about the DTO. This would be
        // what you get from the client in the asp.net application.
        public DTOGenerator(ComponentTestDTO dataObject, string fileN)
        {
            dataTransferObject = dataObject;
            fileName = fileN;

            dataTransferObjectTemplate = new CodeCompileUnit();
            dataTransferObjectNamespace = new CodeNamespace("AutoGeneratedTests");

            // Add namespace imports to the dataTransferObject class.
            dataTransferObjectNamespace.Imports.Add(new CodeNamespaceImport("System"));
            dataTransferObjectNamespace.Imports.Add(new CodeNamespaceImport("System.Linq"));
            dataTransferObjectNamespace.Imports.Add(new CodeNamespaceImport("System.ComponentModel"));
            dataTransferObjectTemplate.Namespaces.Add(dataTransferObjectNamespace);

            // Declare the class and make it public.
            dataTransferObjectClass = new CodeTypeDeclaration
            {
                Name = dataTransferObject.DTOName,
                IsClass = true,
                TypeAttributes = System.Reflection.TypeAttributes.Public
            };

            AddPropertiesToDTOClass();
        }

        public void GenerateCSharpCode()
        {
            CodeDomProvider provider = CodeDomProvider.CreateProvider("CSharp");
            CodeGeneratorOptions options = new CodeGeneratorOptions();
            options.BracingStyle = "C";
            using (StreamWriter sourceWriter = new StreamWriter(fileName))
            {
                provider.GenerateCodeFromCompileUnit(
                    dataTransferObjectTemplate, sourceWriter, options);
            }
        }

        private void AddPropertiesToDTOClass()
        {
            // For each property defined in our DTO, resolve the data to the CodeDOM.
            foreach (var property in dataTransferObject.Properties)
            {
                //var propField;
                if (property.DataType.ToLower().Equals("complex"))
                {
                    // A complex type is a special case.
                    CodeSnippetTypeMember propField = CreateComplexPropertyField(property);
                    dataTransferObjectClass.Members.Add(propField);
                }
                else
                {
                    CodeSnippetTypeMember propField = CreatePropertyField(property);
                    dataTransferObjectClass.Members.Add(propField);
                }
            }
            dataTransferObjectNamespace.Types.Add(dataTransferObjectClass);
        }

        private CodeSnippetTypeMember CreatePropertyField(Property prop)
        {
            CodeSnippetTypeMember propertyField = new CodeSnippetTypeMember();

            if (prop.Required.Equals("True"))
            {
                if (prop.DataType.ToLower().Equals("datetime"))
                {
                    CodeSnippetTypeMember dateTimeDefault = new CodeSnippetTypeMember
                    {
                        Text = "\t\tprivate System.DateTime_" + prop.PropertyName + " = " + "\"" + prop.DefaultValue + "\";"
                    };
                    dataTransferObjectClass.Members.Add(dateTimeDefault);
                    propertyField.Text = "\t\tpublic System.DateTime " + prop.PropertyName + " { get { return _" + prop.PropertyName + "; } set { _" + prop.PropertyName + " = value; } }\n";
                    return propertyField;
                }
                else
                {
                    CodeSnippetTypeMember defaultValueSnippet = CreateDefaultValue(prop);
                    dataTransferObjectClass.Members.Add(defaultValueSnippet);

                    propertyField.Text = "\t\tpublic " + prop.DataType.ToLower() + " " + prop.PropertyName + " { get; set; }\n";
                }
            }
            else
            {
                if (prop.DataType.ToLower().Equals("datetime"))
                {
                    CodeSnippetTypeMember dateTimeNowSnippet = new CodeSnippetTypeMember
                    {
                        Text = "\t\tprivate System.Nullable<System.DateTime> _" + prop.PropertyName + " = DateTime.Now;"
                    };

                    dataTransferObjectClass.Members.Add(dateTimeNowSnippet);

                    propertyField.Text = "\t\tpublic System.Nullable<System.DateTime> " + prop.PropertyName + " { get { return _" + prop.PropertyName + "; } set { _" + prop.PropertyName + " = value; } }\n";
                    return propertyField;
                }
                else
                {
                    CodeSnippetTypeMember defaultValueSnippet = CreateDefaultValue(prop);
                    dataTransferObjectClass.Members.Add(defaultValueSnippet);

                    propertyField.Text = "\t\tpublic System.Nullable<" + prop.DataType.ToLower() + "> " + prop.PropertyName + " { get; set; }\n";
                }
            }
            return propertyField;
        }


        private CodeSnippetTypeMember CreateComplexPropertyField(Property prop)
        {
            ComplexTypeClassGenerator complexClassGen = new ComplexTypeClassGenerator(prop.ComplexType);
            CodeSnippetTypeMember complexTypeSnippet = new CodeSnippetTypeMember
            {
                Text = "\t\tpublic " + prop.ComplexType.ObjectName + " " + prop.ComplexType.ObjectName.ToLower() + " { get; set; }"
            };

            DtoNamespace.Types.Add(complexClassGen.ComplexTypeClass);

            return complexTypeSnippet;
        }

        private CodeSnippetTypeMember CreateDefaultValue(Property prop)
        {
            CodeSnippetTypeMember defaultValue = new CodeSnippetTypeMember();

            switch (prop.DataType.ToLower())
            {
                case "int":
                    defaultValue.Text = "\t\t[DefaultValue(" + prop.DefaultValue + ")]";
                    break;
                case "string":
                    defaultValue.Text = "\t\t[DefaultValue(\"" + prop.DefaultValue + "\")]";
                    break;
                case "bool":
                    defaultValue.Text = "\t\t[DefaultValue(" + bool.Parse(prop.DefaultValue) + ")]";
                    break;
                case "decimal":
                    defaultValue.Text = "\t\t[DefaultValue(" + decimal.Parse(prop.DefaultValue) + ")]";
                    break;
                default:
                    break;
            }

            return defaultValue;
        }
    }
}