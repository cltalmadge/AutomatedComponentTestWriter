using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using System.CodeDom;
using Newtonsoft.Json;
using AutomatedComponentTestWriter.Models;
using System.CodeDom.Compiler;

namespace AutomatedComponentTestWriter.Controllers
{
    public class HomeController : Controller
    {
        public ActionResult Main()
        {
            ComponentTestDTO dto = new ComponentTestDTO();
            return View(dto);
        }
        
        [HttpPost]
        public ActionResult ReadDTO(ComponentTestDTO dto)
        {
            // TODO: Scaffold the component test with the codeDOM here?
            //ComponentTestGenerator componentTest = new ComponentTestGenerator();
            string test = "";
            foreach(var Property in dto.Properties)
            {
                // TODO: Do some processing to each attribute. Scaffold a method
                // to be generated onto the code?
                foreach(var Parameter in Property.Parameters)
                {
                    //if(!(Parameter.ExpectedMessage.Equals("")) || Parameter.ExpectedMessage != null)
                    test += "" + Parameter.ExpectedMessage + "\n";
                }
            }
            // TODO: Return some kind of action based on processing done to DTO.
            //return Content($"1: {dto.Properties.First().PropertyName} 2: {dto.Properties[1].PropertyName} 3: {dto.Properties[2].PropertyName}");
            return Content($"{test}");
        }

        [HttpPost]
        public void CurrentPropertyIndex(int currentIndex)
        {
            ViewBag.CurrentIndex = currentIndex;
        }
    }

    class ComponentTestGenerator
    {
        private CodeCompileUnit componentTest;
        private CodeTypeDeclaration generatedClass;
        private CodeNamespace namespaces;
        private string fileName;
        public string FileName { get => fileName; set => fileName = value; }

        public ComponentTestGenerator(string className)
        {
            componentTest = new CodeCompileUnit();
            generatedClass = new CodeTypeDeclaration(className);
            generatedClass.IsClass = true;
            generatedClass.TypeAttributes = System.Reflection.TypeAttributes.Public;
            generatedClass.CustomAttributes.Add(new CodeAttributeDeclaration("TestClass"));
            // Instantiate our namespace for the class and add our imports to be used in the namespace.
            namespaces = new CodeNamespace("AutoGeneratedTests");
            namespaces.Imports.Add(new CodeNamespaceImport("System"));
            namespaces.Imports.Add(new CodeNamespaceImport("System.Net"));
            namespaces.Imports.Add(new CodeNamespaceImport("Newtonsoft.Json"));
            namespaces.Imports.Add(new CodeNamespaceImport("System.Threading.Tasks"));
            namespaces.Imports.Add(new CodeNamespaceImport("Microsoft.VisualStudio.TestTools.UnitTesting"));

            /* We've declared the namespace and the imports I'm using for this source file.
             * Now we just add the class type to the namespace, and the namespaces to the CodeDOM.
             */
            namespaces.Types.Add(generatedClass);
            componentTest.Namespaces.Add(namespaces);
        }
        
        public void AddGeneratedUnitTest_PropertyRequired(Property prop)
        {
            CodeTypeDeclaration method = new CodeTypeDeclaration(prop.PropertyName);
        }

        public void AddGeneratedUnitTest_PropertyNotRequired(Property prop)
        {
            
        }
    }
}
