//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutoGeneratedTests
{
    using System;
    using System.Net;
    using Newtonsoft.Json;
    using System.Threading.Tasks;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    
    
    public class PresentationDTOUnitTests
    {
        
        [TestMethod()]
        [TestCategory("Integration")]
        public async Task AutoGeneratedUnitTest_TestRandomDocID()
        {
            var _uri = "www.example.com/api/endpoint";
            var request = new PresentationDTO();
            PresentationDTO.docID = @"09ikoPSmXQBKokjjyN5RG17Ce7qe";
            var response = await ApiActions.Post(_uri, request).ConfigureAwait(false);
            var errormessage = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            Assert.AreEqual(HttpStatusCode.NotFound, response.StatusCode);
            Assert.IsNotNull(errormessage);
            var guidstring = JsonConvert.ToString(errormessage);
            Assert.IsTrue(guidstring.Contains(@"docID not found!"));
        }
        
        [TestMethod()]
        [TestCategory("Integration")]
        public async Task AutoGeneratedUnitTest_TestRandomDocID2()
        {
            var _uri = "www.example.com/api/endpoint";
            var request = new PresentationDTO();
            PresentationDTO.docID = @"unrtC409ko";
            var response = await ApiActions.Post(_uri, request).ConfigureAwait(false);
            var errormessage = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            Assert.AreEqual(HttpStatusCode.NotFound, response.StatusCode);
            Assert.IsNotNull(errormessage);
            var guidstring = JsonConvert.ToString(errormessage);
            Assert.IsTrue(guidstring.Contains(@"docID not found!"));
        }
        
        [TestMethod()]
        [TestCategory("Integration")]
        public async Task AutoGeneratedUnitTest_TestRandomDocID3()
        {
            var _uri = "www.example.com/api/endpoint";
            var request = new PresentationDTO();
            PresentationDTO.docID = @"l";
            var response = await ApiActions.Post(_uri, request).ConfigureAwait(false);
            var errormessage = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            Assert.AreEqual(HttpStatusCode.NotFound, response.StatusCode);
            Assert.IsNotNull(errormessage);
            var guidstring = JsonConvert.ToString(errormessage);
            Assert.IsTrue(guidstring.Contains(@"docID not found!"));
        }
        
        [TestMethod()]
        [TestCategory("Integration")]
        public async Task AutoGeneratedUnitTest_TestNullProcessed()
        {
            var _uri = "www.example.com/api/endpoint";
            var request = new PresentationDTO();
            PresentationDTO.processed = null;
            var response = await ApiActions.Post(_uri, request).ConfigureAwait(false);
            var errormessage = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode);
            Assert.IsNotNull(errormessage);
            var guidstring = JsonConvert.ToString(errormessage);
            Assert.IsTrue(guidstring.Contains(@"Processed cannot be null"));
        }
        
        [TestMethod()]
        [TestCategory("Integration")]
        public async Task AutoGeneratedUnitTest_TestSale()
        {
            var _uri = "www.example.com/api/endpoint";
            var request = new PresentationDTO();
            PresentationDTO.sale = null;
            var response = await ApiActions.Post(_uri, request).ConfigureAwait(false);
            var errormessage = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode);
            Assert.IsNotNull(errormessage);
            var guidstring = JsonConvert.ToString(errormessage);
            Assert.IsTrue(guidstring.Contains(@"Sale cannot be null"));
        }
        
        [TestMethod()]
        [TestCategory("Integration")]
        public async Task AutoGeneratedUnitTest_TestDate()
        {
            var _uri = "www.example.com/api/endpoint";
            var request = new PresentationDTO();
            PresentationDTO.sale.SaleDate = DateTime.Parse("12/27/2017 12:00:00 AM");
            var response = await ApiActions.Post(_uri, request).ConfigureAwait(false);
            var errormessage = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            Assert.IsNotNull(errormessage);
            var guidstring = JsonConvert.ToString(errormessage);
            Assert.IsTrue(guidstring.Contains(@"Success"));
        }
        
        [TestMethod()]
        [TestCategory("Integration")]
        public async Task AutoGeneratedUnitTest_TestMan()
        {
            var _uri = "www.example.com/api/endpoint";
            var request = new PresentationDTO();
            PresentationDTO.sale.ManagerID = 895562263;
            var response = await ApiActions.Post(_uri, request).ConfigureAwait(false);
            var errormessage = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            Assert.AreEqual(HttpStatusCode.NotFound, response.StatusCode);
            Assert.IsNotNull(errormessage);
            var guidstring = JsonConvert.ToString(errormessage);
            Assert.IsTrue(guidstring.Contains(@"Manager not found"));
        }
        
        [TestMethod()]
        [TestCategory("Integration")]
        public async Task AutoGeneratedUnitTest_TestAmount()
        {
            var _uri = "www.example.com/api/endpoint";
            var request = new PresentationDTO();
            PresentationDTO.sale.Amount = 01655582921.M;
            var response = await ApiActions.Post(_uri, request).ConfigureAwait(false);
            var errormessage = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            Assert.IsNotNull(errormessage);
            var guidstring = JsonConvert.ToString(errormessage);
            Assert.IsTrue(guidstring.Contains(@"Success"));
        }
    }
}
