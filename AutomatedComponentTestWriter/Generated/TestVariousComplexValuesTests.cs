//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AutoGeneratedTests
{
    using System;
    using System.Net;
    using Newtonsoft.Json;
    using System.Threading.Tasks;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    
    
    public class TestVariousComplexValuesUnitTests
    {
        
        [TestMethod()]
        [TestCategory("Integration")]
        public async Task AutoGeneratedUnitTest_TestNullSales()
        {
            var _uri = "www.google.com/api/endpoint";
            var request = new TestVariousComplexValues();
            TestVariousComplexValues.sales = null;
            var response = await ApiActions.Post(_uri, request).ConfigureAwait(false);
            var errormessage = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode);
            Assert.IsNotNull(errormessage);
            var guidstring = JsonConvert.ToString(errormessage);
            Assert.IsTrue(guidstring.Contains("400"));
        }
        
        [TestMethod()]
        [TestCategory("Integration")]
        public async Task AutoGeneratedUnitTest_TestRandomSalesAge()
        {
            var _uri = "www.google.com/api/endpoint";
            var request = new TestVariousComplexValues();
            TestVariousComplexValues.sales.age = 33;
            var response = await ApiActions.Post(_uri, request).ConfigureAwait(false);
            var errormessage = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            Assert.IsNotNull(errormessage);
            var guidstring = JsonConvert.ToString(errormessage);
            Assert.IsTrue(guidstring.Contains("200"));
        }
        
        [TestMethod()]
        [TestCategory("Integration")]
        public async Task AutoGeneratedUnitTest_TestNullSalesFirstName()
        {
            var _uri = "www.google.com/api/endpoint";
            var request = new TestVariousComplexValues();
            TestVariousComplexValues.sales.firstName = null;
            var response = await ApiActions.Post(_uri, request).ConfigureAwait(false);
            var errormessage = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            Assert.AreEqual(HttpStatusCode.BadRequest, response.StatusCode);
            Assert.IsNotNull(errormessage);
            var guidstring = JsonConvert.ToString(errormessage);
            Assert.IsTrue(guidstring.Contains("402"));
        }
        
        [TestMethod()]
        [TestCategory("Integration")]
        public async Task AutoGeneratedUnitTest_TestSales()
        {
            var _uri = "www.google.com/api/endpoint";
            var request = new TestVariousComplexValues();
            var response = await ApiActions.Post(_uri, request).ConfigureAwait(false);
            var errormessage = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            Assert.IsNotNull(errormessage);
            var guidstring = JsonConvert.ToString(errormessage);
            Assert.IsTrue(guidstring.Contains("200"));
        }
        
        [TestMethod()]
        [TestCategory("Integration")]
        public async Task AutoGeneratedUnitTest_TestRandomName()
        {
            var _uri = "www.google.com/api/endpoint";
            var request = new TestVariousComplexValues();
            TestVariousComplexValues.sales.firstName = "35CTkw5VKuNyKVHQfuKk";
            var response = await ApiActions.Post(_uri, request).ConfigureAwait(false);
            var errormessage = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            Assert.IsNotNull(errormessage);
            var guidstring = JsonConvert.ToString(errormessage);
            Assert.IsTrue(guidstring.Contains("200"));
        }
        
        [TestMethod()]
        [TestCategory("Integration")]
        public async Task AutoGeneratedUnitTest_TestRandomName2()
        {
            var _uri = "www.google.com/api/endpoint";
            var request = new TestVariousComplexValues();
            TestVariousComplexValues.sales.firstName = "tjm0NX";
            var response = await ApiActions.Post(_uri, request).ConfigureAwait(false);
            var errormessage = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
            Assert.AreEqual(HttpStatusCode.OK, response.StatusCode);
            Assert.IsNotNull(errormessage);
            var guidstring = JsonConvert.ToString(errormessage);
            Assert.IsTrue(guidstring.Contains("200"));
        }
    }
}
